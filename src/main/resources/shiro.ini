# =======================
# Shiro INI configuration
# =======================

[main]
# Objetos e suas propriedades sao definidos aqui, como o SecurityManager, Realms
# e qualquer coisa necessaria para construir o SecurityManager
hashService = org.apache.shiro.crypto.hash.DefaultHashService
hashService.hashIterations = 500000
hashService.hashAlgorithmName = SHA-256
# privateSalt precisa ser codificado em base64 no arquivo shiro.ini mas nao no 
# codigo Java
# hahahaha em base64 = YjkwYjdmYTU=
hashService.privateSalt = YjkwYjdmYTU=
hashService.generatePublicSalt = true
passwordMatcher = org.apache.shiro.authc.credential.PasswordMatcher
passwordService = org.apache.shiro.authc.credential.DefaultPasswordService
passwordService.hashService = $hashService
passwordMatcher.passwordService = $passwordService
# milisegundos (1800000 == 30 minutos)
#securityManager.sessionManager.globalSessionTimeout = 1800000

# Configuracao do acesso a BD usando um pool de conexoes
ds = org.apache.shiro.jndi.JndiObjectFactory
ds.resourceName = java:comp/env/jdbc/aplicacao
ds.requiredType = javax.sql.DataSource
jdbcRealm = org.apache.shiro.realm.jdbc.JdbcRealm
jdbcRealm.dataSource = $ds
jdbcRealm.permissionsLookupEnabled = true
jdbcRealm.authenticationQuery = SELECT senha FROM usuario WHERE login = ?
jdbcRealm.userRolesQuery = SELECT b.nome FROM usuario AS a INNER JOIN usuario_tem_papel AS c ON a.codigo = c.usuario_codigo INNER JOIN papel as b ON b.idPapel = c.papel_idPapel WHERE a.login = ?
jdbcRealm.permissionsQuery = SELECT b.valor FROM papel AS a INNER JOIN papel_tem_permissao AS c ON a.idPapel = c.papel_idPapel INNER JOIN permissao as b ON b.idPermissao = c.permissao_idPermissao WHERE a.nome = ?
jdbcRealm.credentialsMatcher = $passwordMatcher

shiro.loginUrl = /usuarios/login
# authc.successUrl = /whatever

[urls]
# O /login.jsp nao eh restrito a usuarios autenticados (caso contrario ninguem
# conseguirir logar!), mas o filtro 'authc' ainda deve ser especificado para ele
# para que ele possa processar as submissoes de login dessa url. Ele eh 
# "esperto" o suficiente para permitir que essas requisicoes passem como 
# especificado pelo shiro.loginUrl acima.
/usuarios/login = authc
/ = authc , roles[admin] , perms["*"]
/usuarios/cadastro/** = anon
/adm/** = authc , roles[admin] , perms["*"]
/usuarios/sair = logout
/account/** = authc
# /remoting/** = authc, roles[b2bClient], perms["remote:invoke:lan,wan"]